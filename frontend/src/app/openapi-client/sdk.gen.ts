// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type OptionsLegacyParser,
  urlSearchParamsBodySerializer,
  formDataBodySerializer,
} from "@hey-api/client-axios";
import type {
  AuthJwtLoginData,
  AuthJwtLoginError,
  AuthJwtLoginResponse,
  AuthJwtLogoutError,
  AuthJwtLogoutResponse,
  OauthGoogleJwtAuthorizeData,
  OauthGoogleJwtAuthorizeError,
  OauthGoogleJwtAuthorizeResponse,
  OauthGoogleJwtCallbackData,
  OauthGoogleJwtCallbackError,
  OauthGoogleJwtCallbackResponse,
  RegisterRegisterData,
  RegisterRegisterError,
  RegisterRegisterResponse,
  ResetForgotPasswordData,
  ResetForgotPasswordError,
  ResetForgotPasswordResponse,
  ResetResetPasswordData,
  ResetResetPasswordError,
  ResetResetPasswordResponse,
  VerifyRequestTokenData,
  VerifyRequestTokenError,
  VerifyRequestTokenResponse,
  VerifyVerifyData,
  VerifyVerifyError,
  VerifyVerifyResponse,
  UsersCurrentUserError,
  UsersCurrentUserResponse,
  UsersPatchCurrentUserData,
  UsersPatchCurrentUserError,
  UsersPatchCurrentUserResponse,
  UsersUserData,
  UsersUserError,
  UsersUserResponse,
  UsersPatchUserData,
  UsersPatchUserError,
  UsersPatchUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserError,
  UsersDeleteUserResponse,
  CreateCheckoutSessionData,
  CreateCheckoutSessionError,
  CreateCheckoutSessionResponse,
  StripeWebhookError,
  StripeWebhookResponse,
  CompleteCheckoutSessionData,
  CompleteCheckoutSessionError,
  CompleteCheckoutSessionResponse2,
  GetUserInvoicesError,
  GetUserInvoicesResponse,
  ReadItemError,
  ReadItemResponse,
  CreateItemData,
  CreateItemError,
  CreateItemResponse,
  DeleteItemData,
  DeleteItemError,
  DeleteItemResponse,
  AddToWaitlistData,
  AddToWaitlistError,
  AddToWaitlistResponse,
  TriggerAccountCreatedForAllError,
  TriggerAccountCreatedForAllResponse,
  BaserowWebhookError,
  BaserowWebhookResponse,
  UpdateEmptyNamesInBaserowError,
  UpdateEmptyNamesInBaserowResponse,
  RemoveDuplicateRowsError,
  RemoveDuplicateRowsResponse,
  ProcessInstagramUrlData,
  ProcessInstagramUrlError,
  ProcessInstagramUrlResponse,
  UploadImageData,
  UploadImageError,
  UploadImageResponse,
  CreateProjectData,
  CreateProjectError,
  CreateProjectResponse,
  GetUserProjectsData,
  GetUserProjectsError,
  GetUserProjectsResponse,
  GetProjectData,
  GetProjectError,
  GetProjectResponse,
  UpdateProjectData,
  UpdateProjectError,
  UpdateProjectResponse,
  DeleteProjectData,
  DeleteProjectError,
  DeleteProjectResponse,
  ChatWithClaudeData,
  ChatWithClaudeError,
  ChatWithClaudeResponse,
  GetProjectConversationsData,
  GetProjectConversationsError,
  GetProjectConversationsResponse,
  GetProjectEditsData,
  GetProjectEditsError,
  GetProjectEditsResponse,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Auth:Jwt.Login
 */
export const authJwtLogin = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<AuthJwtLoginData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AuthJwtLoginResponse,
    AuthJwtLoginError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
    url: "/auth/jwt/login",
  });
};

/**
 * Auth:Jwt.Logout
 */
export const authJwtLogout = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AuthJwtLogoutResponse,
    AuthJwtLogoutError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/jwt/logout",
  });
};

/**
 * Oauth:Google.Jwt.Authorize
 */
export const oauthGoogleJwtAuthorize = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<OauthGoogleJwtAuthorizeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    OauthGoogleJwtAuthorizeResponse,
    OauthGoogleJwtAuthorizeError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/google/authorize",
  });
};

/**
 * Oauth:Google.Jwt.Callback
 * The response varies based on the authentication backend used.
 */
export const oauthGoogleJwtCallback = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<OauthGoogleJwtCallbackData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    OauthGoogleJwtCallbackResponse,
    OauthGoogleJwtCallbackError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/google/callback",
  });
};

/**
 * Register:Register
 */
export const registerRegister = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<RegisterRegisterData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    RegisterRegisterResponse,
    RegisterRegisterError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/register",
  });
};

/**
 * Reset:Forgot Password
 */
export const resetForgotPassword = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<ResetForgotPasswordData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ResetForgotPasswordResponse,
    ResetForgotPasswordError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/forgot-password",
  });
};

/**
 * Reset:Reset Password
 */
export const resetResetPassword = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<ResetResetPasswordData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ResetResetPasswordResponse,
    ResetResetPasswordError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/reset-password",
  });
};

/**
 * Verify:Request-Token
 */
export const verifyRequestToken = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<VerifyRequestTokenData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    VerifyRequestTokenResponse,
    VerifyRequestTokenError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/request-verify-token",
  });
};

/**
 * Verify:Verify
 */
export const verifyVerify = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<VerifyVerifyData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    VerifyVerifyResponse,
    VerifyVerifyError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/verify",
  });
};

/**
 * Users:Current User
 */
export const usersCurrentUser = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UsersCurrentUserResponse,
    UsersCurrentUserError,
    ThrowOnError
  >({
    ...options,
    url: "/users/me",
  });
};

/**
 * Users:Patch Current User
 */
export const usersPatchCurrentUser = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UsersPatchCurrentUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    UsersPatchCurrentUserResponse,
    UsersPatchCurrentUserError,
    ThrowOnError
  >({
    ...options,
    url: "/users/me",
  });
};

/**
 * Users:User
 */
export const usersUser = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UsersUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UsersUserResponse,
    UsersUserError,
    ThrowOnError
  >({
    ...options,
    url: "/users/{id}",
  });
};

/**
 * Users:Patch User
 */
export const usersPatchUser = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UsersPatchUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    UsersPatchUserResponse,
    UsersPatchUserError,
    ThrowOnError
  >({
    ...options,
    url: "/users/{id}",
  });
};

/**
 * Users:Delete User
 */
export const usersDeleteUser = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UsersDeleteUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    UsersDeleteUserResponse,
    UsersDeleteUserError,
    ThrowOnError
  >({
    ...options,
    url: "/users/{id}",
  });
};

/**
 * Create Checkout Session
 */
export const createCheckoutSession = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<CreateCheckoutSessionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateCheckoutSessionResponse,
    CreateCheckoutSessionError,
    ThrowOnError
  >({
    ...options,
    url: "/billing/create-checkout-session",
  });
};

/**
 * Stripe Webhook
 */
export const stripeWebhook = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    StripeWebhookResponse,
    StripeWebhookError,
    ThrowOnError
  >({
    ...options,
    url: "/billing/webhook",
  });
};

/**
 * Complete Checkout Session
 */
export const completeCheckoutSession = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<CompleteCheckoutSessionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CompleteCheckoutSessionResponse2,
    CompleteCheckoutSessionError,
    ThrowOnError
  >({
    ...options,
    url: "/billing/complete-checkout-session",
  });
};

/**
 * Get User Invoices
 */
export const getUserInvoices = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetUserInvoicesResponse,
    GetUserInvoicesError,
    ThrowOnError
  >({
    ...options,
    url: "/billing/invoices",
  });
};

/**
 * Read Item
 */
export const readItem = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ReadItemResponse,
    ReadItemError,
    ThrowOnError
  >({
    ...options,
    url: "/items/",
  });
};

/**
 * Create Item
 */
export const createItem = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<CreateItemData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateItemResponse,
    CreateItemError,
    ThrowOnError
  >({
    ...options,
    url: "/items/",
  });
};

/**
 * Delete Item
 */
export const deleteItem = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DeleteItemData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteItemResponse,
    DeleteItemError,
    ThrowOnError
  >({
    ...options,
    url: "/items/{item_id}",
  });
};

/**
 * Add To Waitlist
 */
export const addToWaitlist = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<AddToWaitlistData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AddToWaitlistResponse,
    AddToWaitlistError,
    ThrowOnError
  >({
    ...options,
    url: "/waitlist/add",
  });
};

/**
 * Trigger Account Created For All
 */
export const triggerAccountCreatedForAll = <
  ThrowOnError extends boolean = false,
>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    TriggerAccountCreatedForAllResponse,
    TriggerAccountCreatedForAllError,
    ThrowOnError
  >({
    ...options,
    url: "/waitlist/trigger-account-created",
  });
};

/**
 * Baserow Webhook
 */
export const baserowWebhook = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    BaserowWebhookResponse,
    BaserowWebhookError,
    ThrowOnError
  >({
    ...options,
    url: "/lead-generation/baserow/webhook",
  });
};

/**
 * Update Empty Names In Baserow
 */
export const updateEmptyNamesInBaserow = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UpdateEmptyNamesInBaserowResponse,
    UpdateEmptyNamesInBaserowError,
    ThrowOnError
  >({
    ...options,
    url: "/lead-generation/baserow/update-empty-names",
  });
};

/**
 * Remove Duplicate Rows
 */
export const removeDuplicateRows = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    RemoveDuplicateRowsResponse,
    RemoveDuplicateRowsError,
    ThrowOnError
  >({
    ...options,
    url: "/lead-generation/baserow/remove-duplicates",
  });
};

/**
 * Process Instagram Url
 */
export const processInstagramUrl = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<ProcessInstagramUrlData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ProcessInstagramUrlResponse,
    ProcessInstagramUrlError,
    ThrowOnError
  >({
    ...options,
    url: "/lead-generation/process-instagram-url",
  });
};

/**
 * Upload Image
 * Upload an image to S3 for home design projects
 */
export const uploadImage = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UploadImageData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UploadImageResponse,
    UploadImageError,
    ThrowOnError
  >({
    ...options,
    ...formDataBodySerializer,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
    url: "/home-design/upload-image",
  });
};

/**
 * Create Project
 * Create a new home design project
 */
export const createProject = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<CreateProjectData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateProjectResponse,
    CreateProjectError,
    ThrowOnError
  >({
    ...options,
    url: "/home-design/projects",
  });
};

/**
 * Get User Projects
 * Get user's home design projects
 */
export const getUserProjects = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GetUserProjectsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetUserProjectsResponse,
    GetUserProjectsError,
    ThrowOnError
  >({
    ...options,
    url: "/home-design/projects",
  });
};

/**
 * Get Project
 * Get a specific project
 */
export const getProject = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetProjectData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetProjectResponse,
    GetProjectError,
    ThrowOnError
  >({
    ...options,
    url: "/home-design/projects/{project_id}",
  });
};

/**
 * Update Project
 * Update a project
 */
export const updateProject = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UpdateProjectData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateProjectResponse,
    UpdateProjectError,
    ThrowOnError
  >({
    ...options,
    url: "/home-design/projects/{project_id}",
  });
};

/**
 * Delete Project
 * Delete a project
 */
export const deleteProject = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DeleteProjectData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteProjectResponse,
    DeleteProjectError,
    ThrowOnError
  >({
    ...options,
    url: "/home-design/projects/{project_id}",
  });
};

/**
 * Chat With Claude
 * Chat with Claude about home design and potentially edit images
 */
export const chatWithClaude = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<ChatWithClaudeData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ChatWithClaudeResponse,
    ChatWithClaudeError,
    ThrowOnError
  >({
    ...options,
    url: "/home-design/chat",
  });
};

/**
 * Get Project Conversations
 * Get all conversations for a project
 */
export const getProjectConversations = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetProjectConversationsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetProjectConversationsResponse,
    GetProjectConversationsError,
    ThrowOnError
  >({
    ...options,
    url: "/home-design/conversations/{project_id}",
  });
};

/**
 * Get Project Edits
 * Get all edits for a project
 */
export const getProjectEdits = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetProjectEditsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetProjectEditsResponse,
    GetProjectEditsError,
    ThrowOnError
  >({
    ...options,
    url: "/home-design/edits/{project_id}",
  });
};
